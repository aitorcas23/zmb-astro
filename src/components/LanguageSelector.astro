---
import i18next, { t } from "i18next";
import { localizePath } from "astro-i18next";
import { notNull } from "@utils/filters";

interface Props {
	translatedUrls?: { [key: string]: string };
	lang?: string;
	extraClass?: string;
	acordeon?: boolean;
}

const { translatedUrls, lang: mainLang, extraClass, acordeon } = Astro.props;
const links = i18next.languages
	.map((lang) => {
		const isCurrentLanguage = lang == (mainLang || i18next.language);
		if (!isCurrentLanguage) {
			const linkText = lang.toUpperCase();
			if (translatedUrls) {
				return {
					text: linkText,
					href: translatedUrls[lang],
				};
			} else {
				return {
					text: linkText,
					href: localizePath(Astro.url.pathname, lang),
				};
			}
		}
	})
	.filter(notNull);

const firstLang = links[0];
---

{
acordeon ? (

		<a class="hover:text-zmb hover:underline p-2 transition-colors duration-150 ease-out" href={firstLang.href}>
			{i18next.language.toUpperCase()}
		</a>
) : (
		<div class="inline-block h-9 min-h-[1em] w-0.5 self-center bg-gray-900/25 dark:bg-white/10"></div>
		<a class="hover:text-zmb hover:underline p-2 transition-colors duration-150 ease-out" href={firstLang.href}>
			{i18next.language.toUpperCase()}
		</a>
	)
}
