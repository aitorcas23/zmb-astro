---
interface Link {
	text: string;
	href: string;
}

interface Dropdown {
	text: string;
	links: Link[];
	id: string;
}

interface Props {
	navElements: (Dropdown | Link)[][];
	id: string;
	position: "left" | "right";
	defaultShow?: boolean;
}

const { navElements, id, position, defaultShow = false } = Astro.props;
const positionClass = `${position}-0`;
const translateClass = position === "right" ? "translate-x-full" : "-translate-x-full";
---

<div
	id={id}
	class:list={[
		"fixed top-0 z-40 h-screen w-60 overflow-y-auto bg-white p-4 transition-transform",
		positionClass,
		translateClass,
		{ "lg:translate-x-0": defaultShow },
	]}
	tabindex="-1"
>
	<button
		type="button"
		data-drawer-hide={id}
		aria-controls={id}
		class:list={[
			"absolute right-2.5 top-2.5 inline-flex h-8 w-8 items-center justify-center rounded-lg bg-transparent text-sm text-gray-900 hover:text-zmb",
			{ "lg:hidden": defaultShow },
		]}
	>
		<svg
			class="h-3 w-3"
			aria-hidden="true"
			xmlns="http://www.w3.org/2000/svg"
			fill="none"
			viewBox="0 0 14 14"
		>
			<path
				stroke="currentColor"
				stroke-linecap="round"
				stroke-linejoin="round"
				stroke-width="2"
				d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"></path>
		</svg>
		<span class="sr-only">Close menu</span>
	</button>

	<div class:list={["overflow-y-auto py-4", "lg:pt-0"]}>
		{
			navElements.map((list, i) => (
				<>
					{i > 0 && <hr class="mx-3 my-4 border border-t" />}
					<ul class="space-y-2 font-medium">
						{list.map((elem) => {
							if ("links" in elem) {
								const dropdown = elem as Dropdown;
								return (
									<li>
										<button
											type="button"
											class="group flex w-full items-center p-2 text-base text-gray-900 transition-colors duration-150 ease-out hover:bg-transparent hover:text-zmb"
											aria-controls={dropdown.id + "Acordeon"}
											data-collapse-toggle={dropdown.id + "Acordeon"}
										>
											<span class="flex-1 whitespace-nowrap text-left">{dropdown.text}</span>
											<svg
												class="h-3 w-3"
												aria-hidden="true"
												xmlns="http://www.w3.org/2000/svg"
												fill="none"
												viewBox="0 0 10 6"
											>
												<path
													stroke="currentColor"
													stroke-linecap="round"
													stroke-linejoin="round"
													stroke-width="2"
													d="m1 1 4 4 4-4"
												/>
											</svg>
										</button>
										<ul id={dropdown.id + "Acordeon"} class="hidden space-y-2 pl-8">
											{dropdown.links.map((link) => (
												<li>
													<a
														href={link.href}
														class="block border-0 p-2 text-gray-900 transition-colors duration-150 ease-out hover:bg-transparent hover:text-zmb"
													>
														{link.text}
													</a>
												</li>
											))}
										</ul>
									</li>
								);
							} else {
								const link = elem as Link;
								return (
									<a
										href={link.href}
										class="block border-0 p-2 text-gray-900 transition-colors duration-150 ease-out hover:bg-transparent hover:text-zmb"
									>
										{link.text}
									</a>
								);
							}
						})}
					</ul>
				</>
			))
		}
		{Astro.slots.has("default") && <hr class="mx-3 my-4 border border-t" />}
		<ul class="space-y-2 font-medium">
			<slot />
		</ul>
	</div>
</div>
