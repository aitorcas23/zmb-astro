---
import i18next, { t, changeLanguage } from "i18next";
import { localizePath } from "astro-i18next";
import { notANumberError, notFoundError, notProvidedError } from "@utils/errorLogs";
import { notFoundResponse } from "@utils/httpResponses";
import { getSeasonById } from "@utils/apiCalls/seasons";
import { getConcertById } from "@utils/apiCalls/concerts";
import ContentLayout from "@layouts/ContentLayout.astro";
import Title from "@components/Title.astro";
import Subtitle from "@components/Subtitle.astro";
import { getAlt, getImage } from "@utils/mediaProcessors";
import ProgramPiece from "@components/ProgramPiece.astro";

changeLanguage("eu");

const { title, id, concertId, concertTitle } = Astro.params;
if (
	title === undefined ||
	id === undefined ||
	concertId === undefined ||
	concertTitle === undefined
) {
	if (!title) {
		notProvidedError("title");
	}
	if (!id) {
		notProvidedError("id");
	}
	if (!concertId) {
		notProvidedError("concertId");
	}
	if (!concertTitle) {
		notProvidedError("concertTitle");
	}
	return notFoundResponse();
}
const intId = parseInt(id);
if (isNaN(intId)) {
	notANumberError("id");
	return notFoundResponse();
}
const season = await getSeasonById(intId, i18next.language, 0);
if (!season) {
	notFoundError("season", { prop: "id", value: id });
	return notFoundResponse();
}
if (season.slug !== title) {
	notFoundError("season", { prop: "id", value: id }, { prop: "title", value: title });
	return notFoundResponse();
}
const intConcertId = parseInt(concertId);
if (isNaN(intConcertId)) {
	notANumberError("concertId");
	return notFoundResponse();
}
if (!season.concerts || !season.concerts.includes(intConcertId)) {
	notFoundError(
		"concert",
		{ prop: "id", value: id },
		{ prop: "title", value: title },
		{ prop: "concertId", value: concertId },
	);
	return notFoundResponse();
}
const concert = await getConcertById(intConcertId, i18next.language, 2);
if (!concert) {
	notFoundError(
		"concert",
		{ prop: "id", value: id },
		{ prop: "title", value: title },
		{ prop: "concertId", value: concertId },
	);
	return notFoundResponse();
}
if (concert.slug !== concertTitle) {
	notFoundError(
		"concert",
		{ prop: "id", value: id },
		{ prop: "title", value: title },
		{ prop: "concertId", value: concertId },
		{ prop: "concertTitle", value: concertTitle },
	);
	return notFoundResponse();
}
let locales: {
	[key: string]: string;
} = {};
for (const locale of i18next.languages) {
	if (locale === i18next.language) continue;
	const translatedSeason = await getSeasonById(intId, locale, 0);
	const translatedConcert = await getConcertById(intConcertId, locale, 0);
	if (translatedSeason && translatedConcert) {
		locales[locale] =
			`${localizePath("denboraldiak", locale)}/${id}/${translatedSeason.slug}/${concertId}/${translatedConcert.slug}`;
	}
}
let concertDateString: string | undefined;
if (concert.date) {
	const concertDate = new Date(concert.date);
	concertDateString = concertDate.toLocaleDateString(i18next.language, {
		year: "numeric",
		month: "2-digit",
		day: "2-digit",
		hour: "2-digit",
		minute: "2-digit",
		timeZone: "Europe/Madrid",
	});
}
const isPastDate = concert.date ? new Date(concert.date) < new Date() : false;
let subtitleElements = [];
if (concertDateString) {
	subtitleElements.push(concertDateString);
}
if (concert.place) {
	subtitleElements.push(concert.place);
}
const subtitle = subtitleElements.join(" - ");
---

<ContentLayout title={concert.title} translatedUrls={locales}>
	<Title>{concert.title}</Title>
	{subtitle && <Subtitle>{subtitle}</Subtitle>}
	<div class="mt-5 flex flex-col gap-8 lg:flex-row">
		{
			concert.image && (
				<div class="flex-grow-[3] basis-0">
					<img
						class="mx-auto object-contain"
						src={getImage("l", concert.image)}
						alt={getAlt(concert.image)}
					/>
				</div>
			)
		}
		{
			concert.content_html && (
				<div class="flex-grow-[3] basis-0">
					<span
						class="format format-base mx-auto mt-16 lg:format-lg format-h1:text-center format-h1:uppercase format-li:ml-8 format-li:text-gray-900"
						set:html={concert.content_html}
					/>
					{!isPastDate && concert.ticketLink && (
						<p class="mb-4 mt-8 text-center lg:mb-0">
							<a
								href={concert.ticketLink}
								class="transition-color rounded-lg border-2 border-zmb px-4 py-2 text-base font-medium text-zmb duration-150 ease-out hover:bg-zmb hover:text-white focus:outline-none focus:ring-4 focus:ring-gray-700 lg:text-xl"
							>
								{t("seasons:concerts.buyTickets")}
							</a>
						</p>
					)}
				</div>
			)
		}
		{
			concert.pieces && concert.pieces.length > 0 && (
				<div class="flex-grow-[2] basis-0">
					<h2 class="mb-10 text-center text-3xl font-bold lg:mb-8">
						{t("seasons:concerts.program")}
					</h2>
					<ul>
						{concert.pieces.map((piece) => {
							if (typeof piece === "number") return;
							return (
								<li class="mt-8 list-none lg:mt-4">
									{piece.media ? (
										<a
											href={`${localizePath("/mediateka/edukia")}/${typeof piece.media === "number" ? piece.media : piece.media.id} /${
												typeof piece.media === "number" ? "not-found" : piece.media.slug
											}`}
											class="no-underline transition-colors duration-150 ease-out hover:[&_*]:text-zmb"
										>
											<ProgramPiece piece={piece} />
										</a>
									) : (
										<ProgramPiece piece={piece} />
									)}
								</li>
							);
						})}
					</ul>
				</div>
			)
		}
	</div>
</ContentLayout>
