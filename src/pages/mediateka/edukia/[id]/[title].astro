---
import { notProvidedError, notANumberError, notFoundError } from "@utils/errorLogs";
import { notFoundResponse } from "@utils/httpResponses";
import { getMediaEntryById } from "@utils/apiCalls/mediaEntries";
import {
	getMediaListsByEntryId,
	getMediaListById,
	type MediaList,
} from "@utils/apiCalls/mediaLists";
import ContentLayout from "@layouts/ContentLayout.astro";
import { getAlt, getImage } from "@utils/mediaProcessors";
import YouTubeVideo from "@components/YouTubeVideo.astro";
import MediaCard from "@components/MediaCard.astro";
import { getMediaEntryAlt, getMediaEntryThumbnail } from "@utils/mediaEntryProcessors";
import HrLink from "@components/HrLink.astro";
import { availableLanguageTags, languageTag } from "@paraglide/runtime";
import { localizePathname } from "@utils/linking";
import * as m from "@paraglide/messages";

const { id, title } = Astro.params;
if (id === undefined || title === undefined) {
	if (id === undefined) notProvidedError("id");
	if (title === undefined) notProvidedError("title");
	return notFoundResponse();
}
const intId = parseInt(id);
if (isNaN(intId)) {
	notANumberError("id");
	return notFoundResponse();
}
const entry = await getMediaEntryById(intId, languageTag(), 1);
if (!entry || entry.slug !== title) {
	notFoundError("season", { prop: "id", value: id }, { prop: "title", value: title });
	return notFoundResponse();
}
const lists = await getMediaListsByEntryId(intId, languageTag(), 3);
let listsEntries: MediaList[] = [];
for (const list of lists) {
	const listEntries = await getMediaListById(list.id, languageTag(), 1);
	if (listEntries) {
		listsEntries.push(listEntries);
	}
}
let locales: {
	[key: string]: string;
} = {};
for (const locale of availableLanguageTags) {
	if (locale === languageTag()) continue;
	const translatedEntry = await getMediaEntryById(intId, locale, 0);
	if (translatedEntry) {
		locales[locale] =
			`${localizePathname("/mediateka/edukia/", locale)}/${id}/${translatedEntry.slug}`;
	}
}
---

<ContentLayout title={entry.title} translatedUrls={locales}>
	<h1
		class="pt-3 text-center text-4xl font-extrabold uppercase text-gray-900 md:pt-6 lg:pt-10 lg:text-5xl"
	>
		{entry.title}
	</h1>
	{
		entry.description && (
			<div class="mt-4">
				<p class="text-center">{entry.description}</p>
			</div>
		)
	}
	<div class="my-12">
		{
			entry.mediaType == "Image" ? (
				<img
					src={getImage("l", entry.mediaUpload)}
					alt={getAlt(entry.mediaUpload)}
					loading="lazy"
					decoding="async"
				/>
			) : entry.mediaType == "YouTube" && entry.youtubeID ? (
				<YouTubeVideo id={entry.youtubeID} title={entry.title} />
			) : (
				<p>Empty for the moment</p>
			)
		}
	</div>
	{
		listsEntries.map((list) => (
			<>
				<h2 class="mb-8 text-center text-3xl font-bold lg:text-4xl">
					{m.media_content_more({ lista: list.title })}
				</h2>
				<div class="flex flex-wrap justify-center gap-4">
					{list.media &&
						list.media
							.filter((listEntry) => typeof listEntry !== "number" && listEntry.id !== entry.id)
							.slice(0, 3)
							.map(
								(entry) =>
									typeof entry !== "number" && (
										<MediaCard
											title={entry.title}
											description={entry.description ?? undefined}
											image={getMediaEntryThumbnail("s", entry)}
											alt={getMediaEntryAlt(entry)}
											link={`${localizePathname("/mediateka/edukia", languageTag())}/${entry.id}/${entry.slug}`}
										/>
									),
							)}
				</div>
				<HrLink
					href={`${localizePathname("/mediateka/listak", languageTag())}/${list.id}/${list.slug}`}
				>
					{m.media_lists_seeContent()}
				</HrLink>
			</>
		))
	}
</ContentLayout>
